{"name":"PicDNA","tagline":"A 2-D Map generation and blending Relogo visual simulation based on intelligent agents.","body":"PicDNA v0.6.2\r\n=============\r\n### *A Relogo intelligent<sup>&#42;</sup> agent based simulation*\r\n\r\nTries to gracefully link two randomly generated two-dimensional maps of objects with different shapes, sizes and colors.\r\n\r\nIn package `picdna.relogo` you will find:\r\n\r\n* [UserGlobalsAndPanelFactory](https://github.com/elcodedocle/PicDNA/blob/master/src/picdna/relogo/UserGlobalsAndPanelFactory.groovy) sets the controls you see during the simulation\r\n* [UserObserver](https://github.com/elcodedocle/PicDNA/blob/master/src/picdna/relogo/UserObserver.groovy) generates the two-dimensional maps\r\n* [ProtoMeme](https://github.com/elcodedocle/PicDNA/blob/master/src/picdna/relogo/ProtoMeme.groovy) establishes the intelligent agents' behavior\r\n\r\nAnything else you will see on this repo is pretty much a bunch of tweaks on a default Relogo Framework for Repast Simphony 2.1 eclipse project.\r\n\r\n## How to use\r\n\r\n* Clone the repo: `git clone https://github.com/elcodedocle/PicDNA`\r\n* Import the project and run it from eclipse kepler included on [Repast Simphony 2.1](http://sourceforge.net/projects/repast/files/Repast%20Simphony/Repast%20Simphony%202.1/)\r\n\r\nOR\r\n\r\n* Download the binary installer from https://github.com/elcodedocle/PicDNA/releases\r\n* Run the jar file: `java -jar PicDNA-v0.6.2-setup.jar`\r\n* Run `start_model.bat` (windows) or `start_model.command` (linux) from selected install dir\r\n\r\n(If installer hangs on 5th or 6th step just close it, the program will be installed anyway. Versions up to v0.5 run nice on [Repast Simphony 2.0](http://sourceforge.net/projects/repast/files/Repast%20Simphony/Repast%20Simphony%202.0/) using [Java SE 6 U31](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html))\r\n\r\n## How it looks\r\n\r\nIt looks different every time! This is a snapshot after a few steps running on default settings:\r\n\r\n![Simulation snapshot](http://i.imgur.com/TX31zGx.png \"With default (and boring) settings, it looks somehow like this.\")\r\n\r\n## How it works\r\n\r\nThe first approach was:\r\n\r\nPressing power (+`Setup` button before v0.6) button does the following setup:\r\n\r\n* Divide the whole 2D-world area horizontally into three parts of equal size\r\n* Generate two static random maps, one on the left side and one on the right side, represented by locked (passive, never change their position, shape, color or size) visible agents\r\n* Make a hidden superposition of both maps in the middle area (by cloning left and right agents on their relative positions and setting their visibility to hidden)\r\n\r\nAfter this, the simulation runs by pressing `>` play button (`Go` button before v0.6) for continuous playback or `>>` button (`Step` button before v0.6) for one-step playback.\r\n\r\nThen, on each step:\r\n\r\n* Generate a random number of dynamic (can move along the middle area, have a random lifespan) agents at random positions with random color/shape/size on the middle area\r\n* Passive hidden agents on middle area act as attractors/repellers of dynamic agents with similar/different properties (size/color/shape)\r\n* Passive, not hidden, agents on left and right areas and active (dynamic) agents on middle area act as repellers/attractors of dynamic agents with similar/different properties (like magnets, just the opposite from above)\r\n* Active agents who have reached their (random) step lifespan die\r\n\r\nOnly one extra feature was later added to this approach:\r\n\r\n* Apart from their position, active (dynamic) agents can change their other properties (color/shape/size) on each step to better fit their environment according to the previously defined rules\r\n\r\nAlso, many controls were added to allow runtime modification of the weights, randomness and random distributions of the behavior-defining heuristics associated with each property of the agents (color/shape/size/position).\r\n\r\n## TODO\r\n\r\n* Use simpler and more visually recognizable patterns in left and right Maps generation<sup>**</sup>\r\n* Dynamic lifespan (when a dynamic agent is in a good/bad environment its lifespan increases/decreases)\r\n\r\n<p><sub>* <i>Intelligent</i> meaning independent state machines that sense and interact with the environment, changing their internal state accordingly, but without any long term memory based learning capacities (as in some sort of combination between reinforcement learning and decision tree machine learning techniques)</sub>\r\n<br><sub>** Rather than just taking samples from common probability distributions, in order to easily appreciate how the agents combine both maps' properties generating an original brand new pattern which, under these conditions, should also be easily recognizable when looking at the simulation output.</sub></p>\r\n","google":"UA-44732985-1","note":"Don't delete this file! It's used internally to help with page regeneration."}